{"ast":null,"code":"var _jsxFileName = \"/home/ivan/IdeaProjects/IoT-smart-shop/user-app/src/components/QRCode.js\";\nimport { Html5Qrcode } from \"html5-qrcode\";\nimport React, { useState, useEffect } from \"react\";\nimport Swal from 'sweetalert2';\nimport { DEFAULT_URL } from \"../index\";\nwindow.Swal = Swal;\n\nfunction QRCode({\n  onAdd\n}) {\n  const [isEnabled, setEnabled] = useState(false);\n  const [qrMessage, setQrMessage] = useState(\"\");\n  useEffect(() => {\n    const config = {\n      fps: 10,\n      qrbox: {\n        width: 200,\n        height: 200\n      }\n    };\n    const html5QrCode = new Html5Qrcode(\"qrCodeContainer\");\n\n    const qrScanerStop = () => {\n      if (html5QrCode && html5QrCode.isScanning) {\n        html5QrCode.stop().then(ignore => console.log(\"Scaner stop\")).catch(err => console.log(\"Scaner error\"));\n      }\n    };\n\n    const qrCodeSuccess = decodedText => {\n      setQrMessage(decodedText);\n      Swal.fire({\n        title: \"Товар успешно добавлен в корзину!\",\n        text: \"Продолжайте свои покупки\",\n        icon: \"success\",\n        timer: 2000,\n        showCancelButton: false,\n        showConfirmButton: false\n      }).then(setEnabled(true));\n      let req = new XMLHttpRequest();\n      req.open(\"GET\", `${DEFAULT_URL}/products?code=${qrMessage}`, true);\n\n      req.onload = () => handleResponse(req.responseText);\n\n      req.onerror = () => alert(\"Сервер временно недоступен\");\n\n      req.setRequestHeader('Content-Type', 'application/json');\n      req.send();\n      setEnabled(false);\n    };\n\n    const handleResponse = text => {\n      let response = JSON.parse(text);\n\n      if (response.status === 200) {\n        onAdd(response.answer);\n      } else {\n        alert(\"Возникла ошибка сканирования! Попробуйте еще раз.\");\n      }\n    };\n\n    if (isEnabled) {\n      html5QrCode.start({\n        facingMode: \"environment\"\n      }, config, qrCodeSuccess);\n      setQrMessage(\"\");\n    } else {\n      qrScanerStop();\n    }\n\n    return () => {\n      qrScanerStop();\n    };\n  }, [isEnabled, onAdd]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"scaner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 18\n    }\n  }, \"\\u041E\\u0442\\u0441\\u043A\\u0430\\u043D\\u0438\\u0440\\u0443\\u0439\\u0442\\u0435 qr-\\u043A\\u043E\\u0434 \\u043D\\u0435\\u043E\\u0431\\u0445\\u043E\\u0434\\u0438\\u043C\\u043E\\u0433\\u043E \\u0442\\u043E\\u0432\\u0430\\u0440\\u0430, \\u0447\\u0442\\u043E\\u0431\\u044B \\u0434\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0435\\u0433\\u043E \\u0432 \\u043A\\u043E\\u0440\\u0437\\u0438\\u043D\\u0443!\")), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"qrCodeContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 18\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"start-button\",\n    onClick: () => setEnabled(!isEnabled),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, isEnabled ? \" Закрыть сканирование \" : \"Сканировать qr-код\")));\n}\n\nexport default QRCode;","map":{"version":3,"sources":["/home/ivan/IdeaProjects/IoT-smart-shop/user-app/src/components/QRCode.js"],"names":["Html5Qrcode","React","useState","useEffect","Swal","DEFAULT_URL","window","QRCode","onAdd","isEnabled","setEnabled","qrMessage","setQrMessage","config","fps","qrbox","width","height","html5QrCode","qrScanerStop","isScanning","stop","then","ignore","console","log","catch","err","qrCodeSuccess","decodedText","fire","title","text","icon","timer","showCancelButton","showConfirmButton","req","XMLHttpRequest","open","onload","handleResponse","responseText","onerror","alert","setRequestHeader","send","response","JSON","parse","status","answer","start","facingMode"],"mappings":"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","sourcesContent":["import {Html5Qrcode} from \"html5-qrcode\";\nimport React, {useState, useEffect} from \"react\";\nimport Swal from 'sweetalert2';\nimport {DEFAULT_URL} from \"../index\";\n\nwindow.Swal = Swal;\n\nfunction QRCode({onAdd}) {\n\n    const [isEnabled, setEnabled] = useState(false);\n    const [qrMessage, setQrMessage] = useState(\"\");\n\n    useEffect(() => {\n        const config = {fps: 10, qrbox: {width: 200, height: 200}};\n\n        const html5QrCode = new Html5Qrcode(\"qrCodeContainer\");\n\n        const qrScanerStop = () => {\n            if (html5QrCode && html5QrCode.isScanning) {\n                    html5QrCode\n                        .stop()\n                        .then((ignore) => console.log(\"Scaner stop\"))\n                        .catch((err) => console.log(\"Scaner error\"));\n            }\n        };\n\n            const qrCodeSuccess = (decodedText) => {\n                setQrMessage(decodedText);\n                Swal.fire({\n                    title: \"Товар успешно добавлен в корзину!\",\n                    text: \"Продолжайте свои покупки\",\n                    icon: \"success\",\n                    timer: 2000,\n                    showCancelButton: false,\n                    showConfirmButton: false\n                }).then(\n                    setEnabled(true)\n                )\n\n                let req = new XMLHttpRequest();\n                req.open(\"GET\", `${DEFAULT_URL}/products?code=${qrMessage}`, true);\n                req.onload = () => handleResponse(req.responseText);\n                req.onerror = () => alert(\"Сервер временно недоступен\");\n                req.setRequestHeader('Content-Type', 'application/json');\n                req.send();\n\n                setEnabled(false)\n            };\n\n            const handleResponse = (text) => {\n                let response = JSON.parse(text);\n                    if (response.status === 200) {\n                        onAdd(response.answer)\n                    } else {\n                        alert(\"Возникла ошибка сканирования! Попробуйте еще раз.\");\n                    }\n                }\n            ;\n\n            if (isEnabled) {\n                html5QrCode.start({facingMode: \"environment\"}, config, qrCodeSuccess);\n                setQrMessage(\"\");\n            } else {\n                qrScanerStop();\n            }\n\n            return () => {\n                qrScanerStop();\n            };\n        }, [isEnabled, onAdd]\n    )\n    ;\n\n    return (\n        <div className=\"scaner\">\n            <div><h1>Отсканируйте qr-код необходимого товара, чтобы добавить его в корзину!</h1></div>\n            <div id=\"qrCodeContainer\"/>\n            <br/><br/>\n            <div>\n                <button className=\"start-button\" onClick={() => setEnabled(!isEnabled)}>\n                    {isEnabled ? \" Закрыть сканирование \" : \"Сканировать qr-код\"}\n                </button>\n            </div>\n        </div>\n    );\n\n\n}\n\nexport default QRCode;"]},"metadata":{},"sourceType":"module"}