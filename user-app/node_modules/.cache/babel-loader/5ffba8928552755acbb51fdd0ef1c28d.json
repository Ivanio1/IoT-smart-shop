{"ast":null,"code":"import { spy, configure, getDependencyTree, Reaction, observable, runInAction, transaction } from 'mobx';\nimport React, { useState, useCallback, memo, forwardRef } from 'react';\nif (!useState) {\n  throw new Error(\"mobx-react-lite requires React with Hooks support\");\n}\nif (!spy) {\n  throw new Error(\"mobx-react-lite requires mobx at least version 4 to be available\");\n}\nvar globalIsUsingStaticRendering = false;\nfunction useStaticRendering(enable) {\n  globalIsUsingStaticRendering = enable;\n}\nfunction isUsingStaticRendering() {\n  return globalIsUsingStaticRendering;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction useForceUpdate() {\n  var _useState = useState(0),\n    setTick = _useState[1];\n  var update = useCallback(function () {\n    setTick(function (tick) {\n      return tick + 1;\n    });\n  }, []);\n  return update;\n}\nfunction isPlainObject(value) {\n  if (!value || typeof value !== \"object\") {\n    return false;\n  }\n  var proto = Object.getPrototypeOf(value);\n  return !proto || proto === Object.prototype;\n}\nfunction getSymbol(name) {\n  if (typeof Symbol === \"function\") {\n    return Symbol.for(name);\n  }\n  return \"__$mobx-react \" + name + \"__\";\n}\nvar mockGlobal = {};\nfunction getGlobal() {\n  if (typeof window !== \"undefined\") {\n    return window;\n  }\n  if (typeof global !== \"undefined\") {\n    return global;\n  }\n  if (typeof self !== \"undefined\") {\n    return self;\n  }\n  return mockGlobal;\n}\nvar observerBatchingConfiguredSymbol = /*#__PURE__*/\ngetSymbol(\"observerBatching\");\nvar observerBatching = function observerBatching(reactionScheduler) {\n  if (typeof reactionScheduler === \"function\") {\n    configure({\n      reactionScheduler: reactionScheduler\n    });\n  }\n  getGlobal()[observerBatchingConfiguredSymbol] = true;\n};\nvar observerBatchingOptOut = function observerBatchingOptOut() {\n  configure({\n    reactionScheduler: undefined\n  });\n  getGlobal()[observerBatchingConfiguredSymbol] = true;\n};\nvar isObserverBatched = function isObserverBatched() {\n  return getGlobal()[observerBatchingConfiguredSymbol];\n};\nfunction printDebugValue(v) {\n  return getDependencyTree(v);\n}\nfunction createTrackingData(reaction) {\n  var trackingData = {\n    cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS,\n    reaction: reaction\n  };\n  return trackingData;\n}\n/**\r\n * The minimum time before we'll clean up a Reaction created in a render\r\n * for a component that hasn't managed to run its effects. This needs to\r\n * be big enough to ensure that a component won't turn up and have its\r\n * effects run without being re-rendered.\r\n */\n\nvar CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 10000;\n/**\r\n * The frequency with which we'll check for leaked reactions.\r\n */\n\nvar CLEANUP_TIMER_LOOP_MILLIS = 10000;\n/**\r\n * Reactions created by components that have yet to be fully mounted.\r\n */\n\nvar uncommittedReactionRefs = /*#__PURE__*/\nnew Set();\n/**\r\n * Latest 'uncommitted reactions' cleanup timer handle.\r\n */\n\nvar reactionCleanupHandle;\nfunction ensureCleanupTimerRunning() {\n  if (reactionCleanupHandle === undefined) {\n    reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS);\n  }\n}\nfunction scheduleCleanupOfReactionIfLeaked(ref) {\n  uncommittedReactionRefs.add(ref);\n  ensureCleanupTimerRunning();\n}\nfunction recordReactionAsCommitted(reactionRef) {\n  uncommittedReactionRefs.delete(reactionRef);\n}\n/**\r\n * Run by the cleanup timer to dispose any outstanding reactions\r\n */\n\nfunction cleanUncommittedReactions() {\n  reactionCleanupHandle = undefined; // Loop through all the candidate leaked reactions; those older\n  // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.\n\n  var now = Date.now();\n  uncommittedReactionRefs.forEach(function (ref) {\n    var tracking = ref.current;\n    if (tracking) {\n      if (now >= tracking.cleanAt) {\n        // It's time to tidy up this leaked reaction.\n        tracking.reaction.dispose();\n        ref.current = null;\n        uncommittedReactionRefs.delete(ref);\n      }\n    }\n  });\n  if (uncommittedReactionRefs.size > 0) {\n    // We've just finished a round of cleanups but there are still\n    // some leak candidates outstanding.\n    ensureCleanupTimerRunning();\n  }\n}\nvar EMPTY_OBJECT = {};\nfunction observerComponentNameFor(baseComponentName) {\n  return \"observer\" + baseComponentName;\n}\nvar warnedAboutBatching = false;\nfunction useObserver(fn, baseComponentName, options) {\n  if (baseComponentName === void 0) {\n    baseComponentName = \"observed\";\n  }\n  if (options === void 0) {\n    options = EMPTY_OBJECT;\n  }\n  if (isUsingStaticRendering()) {\n    return fn();\n  }\n  if (process.env.NODE_ENV !== \"production\" && !warnedAboutBatching && !isObserverBatched()) {\n    console.warn(\"[MobX] You haven't configured observer batching which might result in unexpected behavior in some cases. See more at https://github.com/mobxjs/mobx-react-lite/#observer-batching\");\n    warnedAboutBatching = true;\n  }\n  var wantedForceUpdateHook = options.useForceUpdate || useForceUpdate;\n  var forceUpdate = wantedForceUpdateHook(); // StrictMode/ConcurrentMode/Suspense may mean that our component is\n  // rendered and abandoned multiple times, so we need to track leaked\n  // Reactions.\n\n  var reactionTrackingRef = React.useRef(null);\n  if (!reactionTrackingRef.current) {\n    // First render for this component (or first time since a previous\n    // reaction from an abandoned render was disposed).\n    var newReaction = new Reaction(observerComponentNameFor(baseComponentName), function () {\n      // Observable has changed, meaning we want to re-render\n      // BUT if we're a component that hasn't yet got to the useEffect()\n      // stage, we might be a component that _started_ to render, but\n      // got dropped, and we don't want to make state changes then.\n      // (It triggers warnings in StrictMode, for a start.)\n      if (trackingData.mounted) {\n        // We have reached useEffect(), so we're mounted, and can trigger an update\n        forceUpdate();\n      } else {\n        // We haven't yet reached useEffect(), so we'll need to trigger a re-render\n        // when (and if) useEffect() arrives.  The easiest way to do that is just to\n        // drop our current reaction and allow useEffect() to recreate it.\n        newReaction.dispose();\n        reactionTrackingRef.current = null;\n      }\n    });\n    var trackingData = createTrackingData(newReaction);\n    reactionTrackingRef.current = trackingData;\n    scheduleCleanupOfReactionIfLeaked(reactionTrackingRef);\n  }\n  var reaction = reactionTrackingRef.current.reaction;\n  React.useDebugValue(reaction, printDebugValue);\n  React.useEffect(function () {\n    // Called on first mount only\n    recordReactionAsCommitted(reactionTrackingRef);\n    if (reactionTrackingRef.current) {\n      // Great. We've already got our reaction from our render;\n      // all we need to do is to record that it's now mounted,\n      // to allow future observable changes to trigger re-renders\n      reactionTrackingRef.current.mounted = true;\n    } else {\n      // The reaction we set up in our render has been disposed.\n      // This is either due to bad timings of renderings, e.g. our\n      // component was paused for a _very_ long time, and our\n      // reaction got cleaned up, or we got a observable change\n      // between render and useEffect\n      // Re-create the reaction\n      reactionTrackingRef.current = {\n        reaction: new Reaction(observerComponentNameFor(baseComponentName), function () {\n          // We've definitely already been mounted at this point\n          forceUpdate();\n        }),\n        cleanAt: Infinity\n      };\n      forceUpdate();\n    }\n    return function () {\n      reactionTrackingRef.current.reaction.dispose();\n      reactionTrackingRef.current = null;\n    };\n  }, []); // render the original component, but have the\n  // reaction track the observables, so that rendering\n  // can be invalidated (see above) once a dependency changes\n\n  var rendering;\n  var exception;\n  reaction.track(function () {\n    try {\n      rendering = fn();\n    } catch (e) {\n      exception = e;\n    }\n  });\n  if (exception) {\n    throw exception; // re-throw any exceptions catched during rendering\n  }\n  return rendering;\n}\nfunction observer(baseComponent, options) {\n  // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n  if (isUsingStaticRendering()) {\n    return baseComponent;\n  }\n  var realOptions = _extends({\n    forwardRef: false\n  }, options);\n  var baseComponentName = baseComponent.displayName || baseComponent.name;\n  var wrappedComponent = function wrappedComponent(props, ref) {\n    return useObserver(function () {\n      return baseComponent(props, ref);\n    }, baseComponentName);\n  };\n  wrappedComponent.displayName = baseComponentName; // memo; we are not interested in deep updates\n  // in props; we assume that if deep objects are changed,\n  // this is in observables, which would have been tracked anyway\n\n  var memoComponent;\n  if (realOptions.forwardRef) {\n    // we have to use forwardRef here because:\n    // 1. it cannot go before memo, only after it\n    // 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it\n    //    since it wouldn't be a callable function anymore\n    memoComponent = memo(forwardRef(wrappedComponent));\n  } else {\n    memoComponent = memo(wrappedComponent);\n  }\n  copyStaticProperties(baseComponent, memoComponent);\n  memoComponent.displayName = baseComponentName;\n  return memoComponent;\n} // based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\n\nvar hoistBlackList = {\n  $$typeof: true,\n  render: true,\n  compare: true,\n  type: true\n};\nfunction copyStaticProperties(base, target) {\n  Object.keys(base).forEach(function (key) {\n    if (!hoistBlackList[key]) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));\n    }\n  });\n}\nfunction ObserverComponent(_ref) {\n  var children = _ref.children,\n    render = _ref.render;\n  var component = children || render;\n  if (typeof component !== \"function\") {\n    return null;\n  }\n  return useObserver(component);\n}\nObserverComponent.propTypes = {\n  children: ObserverPropsCheck,\n  render: ObserverPropsCheck\n};\nObserverComponent.displayName = \"Observer\";\nfunction ObserverPropsCheck(props, key, componentName, location, propFullName) {\n  var extraKey = key === \"children\" ? \"render\" : \"children\";\n  var hasProp = typeof props[key] === \"function\";\n  var hasExtraProp = typeof props[extraKey] === \"function\";\n  if (hasProp && hasExtraProp) {\n    return new Error(\"MobX Observer: Do not use children and render in the same time in`\" + componentName);\n  }\n  if (hasProp || hasExtraProp) {\n    return null;\n  }\n  return new Error(\"Invalid prop `\" + propFullName + \"` of type `\" + typeof props[key] + \"` supplied to\" + \" `\" + componentName + \"`, expected `function`.\");\n}\nfunction useAsObservableSourceInternal(current, usedByLocalStore) {\n  var culprit = usedByLocalStore ? \"useLocalStore\" : \"useAsObservableSource\";\n  if (process.env.NODE_ENV !== \"production\" && usedByLocalStore) {\n    var _React$useState = React.useState(current),\n      initialSource = _React$useState[0];\n    if (initialSource !== undefined && current === undefined || initialSource === undefined && current !== undefined) {\n      throw new Error(\"make sure you never pass `undefined` to \" + culprit);\n    }\n  }\n  if (usedByLocalStore && current === undefined) {\n    return undefined;\n  }\n  if (process.env.NODE_ENV !== \"production\" && !isPlainObject(current)) {\n    throw new Error(culprit + \" expects a plain object as \" + (usedByLocalStore ? \"second\" : \"first\") + \" argument\");\n  }\n  var _React$useState2 = React.useState(function () {\n      return observable(current, {}, {\n        deep: false\n      });\n    }),\n    res = _React$useState2[0];\n  if (process.env.NODE_ENV !== \"production\" && Object.keys(res).length !== Object.keys(current).length) {\n    throw new Error(\"the shape of objects passed to \" + culprit + \" should be stable\");\n  }\n  runInAction(function () {\n    Object.assign(res, current);\n  });\n  return res;\n}\nfunction useAsObservableSource(current) {\n  return useAsObservableSourceInternal(current, false);\n}\nfunction useLocalStore(initializer, current) {\n  var source = useAsObservableSourceInternal(current, true);\n  return React.useState(function () {\n    var local = observable(initializer(source));\n    if (isPlainObject(local)) {\n      runInAction(function () {\n        Object.keys(local).forEach(function (key) {\n          var value = local[key];\n          if (typeof value === \"function\") {\n            // @ts-ignore No idea why ts2536 is popping out here\n            local[key] = wrapInTransaction(value, local);\n          }\n        });\n      });\n    }\n    return local;\n  })[0];\n} // tslint:disable-next-line: ban-types\n\nfunction wrapInTransaction(fn, context) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return transaction(function () {\n      return fn.apply(context, args);\n    });\n  };\n}\nexport { ObserverComponent as Observer, isObserverBatched, isUsingStaticRendering, observer, observerBatching, observerBatchingOptOut, useAsObservableSource, useForceUpdate, useLocalStore, useObserver, useStaticRendering };","map":{"version":3,"sources":["../src/assertEnvironment.ts","../src/staticRendering.ts","../src/utils.ts","../src/observerBatching.ts","../src/printDebugValue.ts","../src/reactionCleanupTracking.ts","../src/useObserver.ts","../src/observer.ts","../src/ObserverComponent.ts","../src/useAsObservableSource.ts","../src/useLocalStore.ts"],"names":["useState","Error","spy","globalIsUsingStaticRendering","useStaticRendering","enable","isUsingStaticRendering","useForceUpdate","setTick","update","useCallback","tick","isPlainObject","value","proto","Object","getPrototypeOf","prototype","getSymbol","name","Symbol","for","mockGlobal","getGlobal","window","global","self","observerBatchingConfiguredSymbol","observerBatching","reactionScheduler","configure","observerBatchingOptOut","undefined","isObserverBatched","printDebugValue","v","getDependencyTree","createTrackingData","reaction","trackingData","cleanAt","Date","now","CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS","CLEANUP_TIMER_LOOP_MILLIS","uncommittedReactionRefs","Set","reactionCleanupHandle","ensureCleanupTimerRunning","setTimeout","cleanUncommittedReactions","scheduleCleanupOfReactionIfLeaked","ref","add","recordReactionAsCommitted","reactionRef","delete","forEach","tracking","current","dispose","size","EMPTY_OBJECT","observerComponentNameFor","baseComponentName","warnedAboutBatching","useObserver","fn","options","console","warn","wantedForceUpdateHook","forceUpdate","reactionTrackingRef","React","useRef","newReaction","Reaction","mounted","useDebugValue","useEffect","Infinity","rendering","exception","track","e","observer","baseComponent","realOptions","forwardRef","displayName","wrappedComponent","props","memoComponent","memo","copyStaticProperties","hoistBlackList","$$typeof","render","compare","type","base","target","keys","key","defineProperty","getOwnPropertyDescriptor","ObserverComponent","children","component","propTypes","ObserverPropsCheck","componentName","location","propFullName","extraKey","hasProp","hasExtraProp","useAsObservableSourceInternal","usedByLocalStore","culprit","initialSource","res","observable","deep","length","runInAction","assign","useAsObservableSource","useLocalStore","initializer","source","local","wrapInTransaction","context","args","transaction","apply"],"mappings":";;AAGA,IAAI,CAACA,QAAL,EAAe;EACX,MAAM,IAAIC,KAAJ,CAAU,mDAAV,CAAN;AACH;AACD,IAAI,CAACC,GAAL,EAAU;EACN,MAAM,IAAID,KAAJ,CAAU,kEAAV,CAAN;AACH;ACRD,IAAIE,4BAA4B,GAAG,KAAnC;AAEA,SAAgBC,kBAAAA,CAAmBC,MAAAA,EAAAA;EAC/BF,4BAA4B,GAAGE,MAA/BF;AACH;AAED,SAAgBG,sBAAAA,CAAAA,EAAAA;EACZ,OAAOH,4BAAP;AACH;;;;;;;;;;;;;;;SCAeI,cAAAA,CAAAA,EAAAA;kBACQP,QAAQ,CAAC,CAAD,CAAA;IAAnBQ,OAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA;EAET,IAAMC,MAAM,GAAGC,WAAW,CAAC,YAAA;IACvBF,OAAO,CAAC,UAAA,IAAI,EAAA;MAAA,OAAIG,IAAI,GAAG,CAAX;IAAA,CAAL,CAAPH;EACH,CAFyB,EAEvB,EAFuB,CAA1B;EAIA,OAAOC,MAAP;AACH;AAED,SAAgBG,aAAAA,CAAcC,KAAAA,EAAAA;EAC1B,IAAI,CAACA,KAAD,IAAU,OAAOA,KAAP,KAAiB,QAA/B,EAAyC;IACrC,OAAO,KAAP;EACH;EACD,IAAMC,KAAK,GAAGC,MAAM,CAACC,cAAPD,CAAsBF,KAAtBE,CAAd;EACA,OAAO,CAACD,KAAD,IAAUA,KAAK,KAAKC,MAAM,CAACE,SAAlC;AACH;AAED,SAAgBC,SAAAA,CAAUC,IAAAA,EAAAA;EACtB,IAAI,OAAOC,MAAP,KAAkB,UAAtB,EAAkC;IAC9B,OAAOA,MAAM,CAACC,GAAPD,CAAWD,IAAXC,CAAP;EACH;EACD,OAAA,gBAAA,GAAwBD,IAAxB,GAAA,IAAA;AACH;AAKD,IAAMG,UAAU,GAAG,CAAA,CAAnB;AAEA,SAAgBC,SAAAA,CAAAA,EAAAA;EACZ,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;IAC/B,OAAOA,MAAP;EACH;EACD,IAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;IAC/B,OAAOA,MAAP;EACH;EACD,IAAI,OAAOC,IAAP,KAAgB,WAApB,EAAiC;IAC7B,OAAOA,IAAP;EACH;EACD,OAAOJ,UAAP;AACH;ACvCD,IAAMK,gCAAgC,GAAA;AAAGT,SAAS,CAAC,kBAAD,CAAlD;AAEA,IAAaU,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,iBAAD,EAAA;EAC5B,IAAI,OAAOA,iBAAP,KAA6B,UAAjC,EAA6C;IACzCC,SAAS,CAAC;MAAED,iBAAiB,EAAjBA;IAAF,CAAD,CAATC;EACH;EACDP,SAAS,CAAA,CAAA,CAAGI,gCAAH,CAATJ,GAAgD,IAAhDA;AACH,CALM;AAOP,IAAaQ,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAA,EAAA;EAClCD,SAAS,CAAC;IAAED,iBAAiB,EAAEG;EAArB,CAAD,CAATF;EACAP,SAAS,CAAA,CAAA,CAAGI,gCAAH,CAATJ,GAAgD,IAAhDA;AACH,CAHM;AAKP,IAAaU,iBAAiB,GAAG,SAApBA,iBAAoB,CAAA,EAAA;EAAA,OAAMV,SAAS,CAAA,CAAA,CAAGI,gCAAH,CAAf;AAAA,CAA1B;SCtBSO,eAAAA,CAAgBC,CAAAA,EAAAA;EAC5B,OAAOC,iBAAiB,CAACD,CAAD,CAAxB;AACH;SCoBeE,kBAAAA,CAAmBC,QAAAA,EAAAA;EAC/B,IAAMC,YAAY,GAAsB;IACpCC,OAAO,EAAEC,IAAI,CAACC,GAALD,CAAAA,CAAAA,GAAaE,qCADc;IAEpCL,QAAQ,EAARA;EAFoC,CAAxC;EAIA,OAAOC,YAAP;AACH;AAED;;;;;;;AAMO,IAAMI,qCAAqC,GAAG,KAA9C;AAEP;;;;AAGO,IAAMC,yBAAyB,GAAG,KAAlC;AAEP;;;;AAGA,IAAMC,uBAAuB,GAAA;AAA0D,IAAIC,GAAJ,CAAA,CAAvF;AAEA;;;;AAGA,IAAIC,qBAAJ;AAEA,SAASC,yBAAT,CAAA,EAAA;EACI,IAAID,qBAAqB,KAAKf,SAA9B,EAAyC;IACrCe,qBAAqB,GAAGE,UAAU,CAACC,yBAAD,EAA4BN,yBAA5B,CAAlCG;EACH;AACJ;AAED,SAAgBI,iCAAAA,CACZC,GAAAA,EAAAA;EAEAP,uBAAuB,CAACQ,GAAxBR,CAA4BO,GAA5BP,CAAAA;EAEAG,yBAAyB,CAAA,CAAA;AAC5B;AAED,SAAgBM,yBAAAA,CACZC,WAAAA,EAAAA;EAEAV,uBAAuB,CAACW,MAAxBX,CAA+BU,WAA/BV,CAAAA;AACH;AAED;;;;AAGA,SAASK,yBAAT,CAAA,EAAA;EACIH,qBAAqB,GAAGf,SAAxBe,CAAAA,CAAAA;EAGA;;EAEA,IAAML,GAAG,GAAGD,IAAI,CAACC,GAALD,CAAAA,CAAZ;EACAI,uBAAuB,CAACY,OAAxBZ,CAAgC,UAAA,GAAG,EAAA;IAC/B,IAAMa,QAAQ,GAAGN,GAAG,CAACO,OAArB;IACA,IAAID,QAAJ,EAAc;MACV,IAAIhB,GAAG,IAAIgB,QAAQ,CAAClB,OAApB,EAA6B;QACzB;QACAkB,QAAQ,CAACpB,QAAToB,CAAkBE,OAAlBF,CAAAA,CAAAA;QACAN,GAAG,CAACO,OAAJP,GAAc,IAAdA;QACAP,uBAAuB,CAACW,MAAxBX,CAA+BO,GAA/BP,CAAAA;MACH;IACJ;EACJ,CAVDA,CAAAA;EAYA,IAAIA,uBAAuB,CAACgB,IAAxBhB,GAA+B,CAAnC,EAAsC;IAClC;IACA;IACAG,yBAAyB,CAAA,CAAA;EAC5B;AACJ;AClFD,IAAMc,YAAY,GAAG,CAAA,CAArB;AAEA,SAASC,wBAAT,CAAkCC,iBAAlC,EAAA;EACI,OAAA,UAAA,GAAkBA,iBAAlB;AACH;AAED,IAAIC,mBAAmB,GAAG,KAA1B;AAEA,SAAgBC,WAAAA,CACZC,EAAAA,EACAH,iBAAAA,EACAI,OAAAA,EAAAA;MADAJ,iBAAAA,KAAAA,KAAAA,CAAAA,EAAAA;IAAAA,iBAAAA,GAA4B,UAAA;;MAC5BI,OAAAA,KAAAA,KAAAA,CAAAA,EAAAA;IAAAA,OAAAA,GAA+BN,YAAAA;;EAE/B,IAAIxD,sBAAsB,CAAA,CAA1B,EAA8B;IAC1B,OAAO6D,EAAE,CAAA,CAAT;EACH;EAED,IAAI,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,IAAW,CAACF,mBAAZ,IAAmC,CAAChC,iBAAiB,CAAA,CAAzD,EAA6D;IACzDoC,OAAO,CAACC,IAARD,CAAAA,mLAAAA,CAAAA;IAGAJ,mBAAmB,GAAG,IAAtBA;EACH;EAED,IAAMM,qBAAqB,GAAGH,OAAO,CAAC7D,cAAR6D,IAA0B7D,cAAxD;EACA,IAAMiE,WAAW,GAAGD,qBAAqB,CAAA,CAAzC,CAAA,CAAA;EAGA;EACA;;EACA,IAAME,mBAAmB,GAAGC,KAAK,CAACC,MAAND,CAAuC,IAAvCA,CAA5B;EAEA,IAAI,CAACD,mBAAmB,CAACd,OAAzB,EAAkC;IAC9B;IACA;IAEA,IAAMiB,WAAW,GAAG,IAAIC,QAAJ,CAAad,wBAAwB,CAACC,iBAAD,CAArC,EAA0D,YAAA;MAC1E;MACA;MACA;MACA;MACA;MACA,IAAIzB,YAAY,CAACuC,OAAjB,EAA0B;QACtB;QACAN,WAAW,CAAA,CAAA;MACd,CAHD,MAGO;QACH;QACA;QACA;QACAI,WAAW,CAAChB,OAAZgB,CAAAA,CAAAA;QACAH,mBAAmB,CAACd,OAApBc,GAA8B,IAA9BA;MACH;IACJ,CAhBmB,CAApB;IAkBA,IAAMlC,YAAY,GAAGF,kBAAkB,CAACuC,WAAD,CAAvC;IACAH,mBAAmB,CAACd,OAApBc,GAA8BlC,YAA9BkC;IACAtB,iCAAiC,CAACsB,mBAAD,CAAjCtB;EACH;MAEOb,QAAAA,GAAamC,mBAAmB,CAACd,OAAAA,CAAjCrB,QAAAA;EACRoC,KAAK,CAACK,aAANL,CAAoBpC,QAApBoC,EAA8BxC,eAA9BwC,CAAAA;EAEAA,KAAK,CAACM,SAANN,CAAgB,YAAA;IACZ;IACApB,yBAAyB,CAACmB,mBAAD,CAAzBnB;IAEA,IAAImB,mBAAmB,CAACd,OAAxB,EAAiC;MAC7B;MACA;MACA;MACAc,mBAAmB,CAACd,OAApBc,CAA4BK,OAA5BL,GAAsC,IAAtCA;IACH,CALD,MAKO;MACH;MACA;MACA;MACA;MACA;MAEA;MACAA,mBAAmB,CAACd,OAApBc,GAA8B;QAC1BnC,QAAQ,EAAE,IAAIuC,QAAJ,CAAad,wBAAwB,CAACC,iBAAD,CAArC,EAA0D,YAAA;UAChE;UACAQ,WAAW,CAAA,CAAA;QACd,CAHS,CADgB;QAK1BhC,OAAO,EAAEyC;MALiB,CAA9BR;MAOAD,WAAW,CAAA,CAAA;IACd;IAED,OAAO,YAAA;MACHC,mBAAmB,CAACd,OAApBc,CAA6BnC,QAA7BmC,CAAsCb,OAAtCa,CAAAA,CAAAA;MACAA,mBAAmB,CAACd,OAApBc,GAA8B,IAA9BA;IACH,CAHD;EAIH,CA/BDC,EA+BG,EA/BHA,CAAAA,CAAAA,CAAAA;EAkCA;EACA;;EACA,IAAIQ,SAAJ;EACA,IAAIC,SAAJ;EACA7C,QAAQ,CAAC8C,KAAT9C,CAAe,YAAA;IACX,IAAI;MACA4C,SAAS,GAAGf,EAAE,CAAA,CAAde;IACH,CAFD,CAEE,OAAOG,CAAP,EAAU;MACRF,SAAS,GAAGE,CAAZF;IACH;EACJ,CAND7C,CAAAA;EAOA,IAAI6C,SAAJ,EAAe;IACX,MAAMA,SAAN,CADW,CAAA;EAEd;EACD,OAAOD,SAAP;AACH;SC5FeI,QAAAA,CACZC,aAAAA,EACAnB,OAAAA,EAAAA;EAEA;EACA,IAAI9D,sBAAsB,CAAA,CAA1B,EAA8B;IAC1B,OAAOiF,aAAP;EACH;EAED,IAAMC,WAAW,GAAA,QAAA,CAAA;IACbC,UAAU,EAAE;EADC,CAAA,EAEVrB,OAFU,CAAjB;EAKA,IAAMJ,iBAAiB,GAAGuB,aAAa,CAACG,WAAdH,IAA6BA,aAAa,CAACpE,IAArE;EAEA,IAAMwE,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,KAAD,EAAWxC,GAAX,EAAA;IACrB,OAAOc,WAAW,CAAC,YAAA;MAAA,OAAMqB,aAAa,CAACK,KAAD,EAAQxC,GAAR,CAAnB;IAAA,CAAD,EAAkCY,iBAAlC,CAAlB;EACH,CAFD;EAGA2B,gBAAgB,CAACD,WAAjBC,GAA+B3B,iBAA/B2B,CAAAA,CAAAA;EAGA;EACA;;EACA,IAAIE,aAAJ;EACA,IAAIL,WAAW,CAACC,UAAhB,EAA4B;IACxB;IACA;IACA;IACA;IACAI,aAAa,GAAGC,IAAI,CAACL,UAAU,CAACE,gBAAD,CAAX,CAApBE;EACH,CAND,MAMO;IACHA,aAAa,GAAGC,IAAI,CAACH,gBAAD,CAApBE;EACH;EAEDE,oBAAoB,CAACR,aAAD,EAAgBM,aAAhB,CAApBE;EACAF,aAAa,CAACH,WAAdG,GAA4B7B,iBAA5B6B;EAEA,OAAOA,aAAP;AACH,CAAA,CAAA;;AAGD,IAAMG,cAAc,GAAQ;EACxBC,QAAQ,EAAE,IADc;EAExBC,MAAM,EAAE,IAFgB;EAGxBC,OAAO,EAAE,IAHe;EAIxBC,IAAI,EAAE;AAJkB,CAA5B;AAOA,SAASL,oBAAT,CAA8BM,IAA9B,EAAyCC,MAAzC,EAAA;EACIvF,MAAM,CAACwF,IAAPxF,CAAYsF,IAAZtF,CAAAA,CAAkB0C,OAAlB1C,CAA0B,UAAA,GAAG,EAAA;IACzB,IAAI,CAACiF,cAAc,CAACQ,GAAD,CAAnB,EAA0B;MACtBzF,MAAM,CAAC0F,cAAP1F,CAAsBuF,MAAtBvF,EAA8ByF,GAA9BzF,EAAmCA,MAAM,CAAC2F,wBAAP3F,CAAgCsF,IAAhCtF,EAAsCyF,GAAtCzF,CAAnCA,CAAAA;IACH;EACJ,CAJDA,CAAAA;AAKH;ACvFD,SAAS4F,iBAAT,CAAA,IAAA,EAAA;MAA6BC,QAAAA,GAAAA,IAAAA,CAAAA,QAAAA;IAAUV,MAAAA,GAAAA,IAAAA,CAAAA,MAAAA;EACnC,IAAMW,SAAS,GAAGD,QAAQ,IAAIV,MAA9B;EACA,IAAI,OAAOW,SAAP,KAAqB,UAAzB,EAAqC;IACjC,OAAO,IAAP;EACH;EACD,OAAO3C,WAAW,CAAC2C,SAAD,CAAlB;AACH;AACDF,iBAAiB,CAACG,SAAlBH,GAA8B;EAC1BC,QAAQ,EAAEG,kBADgB;EAE1Bb,MAAM,EAAEa;AAFkB,CAA9BJ;AAIAA,iBAAiB,CAACjB,WAAlBiB,GAAgC,UAAhCA;AAIA,SAASI,kBAAT,CACInB,KADJ,EAEIY,GAFJ,EAGIQ,aAHJ,EAIIC,QAJJ,EAKIC,YALJ,EAAA;EAOI,IAAMC,QAAQ,GAAGX,GAAG,KAAK,UAARA,GAAqB,QAArBA,GAAgC,UAAjD;EACA,IAAMY,OAAO,GAAG,OAAOxB,KAAK,CAACY,GAAD,CAAZ,KAAsB,UAAtC;EACA,IAAMa,YAAY,GAAG,OAAOzB,KAAK,CAACuB,QAAD,CAAZ,KAA2B,UAAhD;EACA,IAAIC,OAAO,IAAIC,YAAf,EAA6B;IACzB,OAAO,IAAIpH,KAAJ,CACH,oEAAA,GAAuE+G,aADpE,CAAP;EAGH;EAED,IAAII,OAAO,IAAIC,YAAf,EAA6B;IACzB,OAAO,IAAP;EACH;EACD,OAAO,IAAIpH,KAAJ,CACH,gBAAA,GACIiH,YADJ,GAEI,aAFJ,GAGI,OAAOtB,KAAK,CAACY,GAAD,CAHhB,GAII,eAJJ,GAKI,IALJ,GAMIQ,aANJ,GAOI,yBARD,CAAP;AAUH;SC9CeM,6BAAAA,CACZ3D,OAAAA,EACA4D,gBAAAA,EAAAA;EAEA,IAAMC,OAAO,GAAGD,gBAAgB,GAAG,eAAH,GAAqB,uBAArD;EACA,IAAI,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,IAAWA,gBAAf,EAAiC;IAAA,IAAA,eAAA,GACL7C,KAAK,CAAC1E,QAAN0E,CAAef,OAAfe,CADK;MACtB+C,aADsB,GAAA,eAAA,CAAA,CAAA,CAAA;IAE7B,IACKA,aAAa,KAAKzF,SAAlByF,IAA+B9D,OAAO,KAAK3B,SAA5C,IACCyF,aAAa,KAAKzF,SAAlByF,IAA+B9D,OAAO,KAAK3B,SAFhD,EAGE;MACE,MAAM,IAAI/B,KAAJ,CAAA,0CAAA,GAAuDuH,OAAvD,CAAN;IACH;EACJ;EACD,IAAID,gBAAgB,IAAI5D,OAAO,KAAK3B,SAApC,EAA+C;IAC3C,OAAOA,SAAP;EACH;EACD,IAAI,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,IAAW,CAACpB,aAAa,CAAC+C,OAAD,CAA7B,EAAwC;IACpC,MAAM,IAAI1D,KAAJ,CACCuH,OADD,GAAA,6BAAA,IACsCD,gBAAgB,GAAG,QAAH,GAAc,OADpE,CAAA,GAAA,WAAA,CAAN;EAGH;yBAEa,KAAK,CAACvH,QAAN,CAAe,YAAA;MAAA,OAAM2H,UAAU,CAAChE,OAAD,EAAU,CAAA,CAAV,EAAc;QAAEiE,IAAI,EAAE;MAAR,CAAd,CAAhB;IAAA,CAAf,CAAA;IAAPF,GAAAA,GAAAA,gBAAAA,CAAAA,CAAAA,CAAAA;EACP,IAAI,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,IAAW3G,MAAM,CAACwF,IAAPxF,CAAY2G,GAAZ3G,CAAAA,CAAiB8G,MAAjB9G,KAA4BA,MAAM,CAACwF,IAAPxF,CAAY4C,OAAZ5C,CAAAA,CAAqB8G,MAAhE,EAAwE;IACpE,MAAM,IAAI5H,KAAJ,CAAA,iCAAA,GAA4CuH,OAA5C,GAAA,mBAAA,CAAN;EACH;EACDM,WAAW,CAAC,YAAA;IACR/G,MAAM,CAACgH,MAAPhH,CAAc2G,GAAd3G,EAAmB4C,OAAnB5C,CAAAA;EACH,CAFU,CAAX+G;EAGA,OAAOJ,GAAP;AACH;AAED,SAAgBM,qBAAAA,CAA+BrE,OAAAA,EAAAA;EAC3C,OAAO2D,6BAA6B,CAAC3D,OAAD,EAAU,KAAV,CAApC;AACH;SC7BesE,aAAAA,CACZC,WAAAA,EACAvE,OAAAA,EAAAA;EAEA,IAAMwE,MAAM,GAAGb,6BAA6B,CAAC3D,OAAD,EAAU,IAAV,CAA5C;EAEA,OAAO,KAAK,CAAC3D,QAAN,CAAe,YAAA;IAClB,IAAMoI,KAAK,GAAGT,UAAU,CAACO,WAAW,CAACC,MAAD,CAAZ,CAAxB;IACA,IAAIvH,aAAa,CAACwH,KAAD,CAAjB,EAA0B;MACtBN,WAAW,CAAC,YAAA;QACR/G,MAAM,CAACwF,IAAPxF,CAAYqH,KAAZrH,CAAAA,CAAmB0C,OAAnB1C,CAA2B,UAAA,GAAG,EAAA;UAC1B,IAAMF,KAAK,GAAGuH,KAAK,CAAC5B,GAAD,CAAnB;UACA,IAAI,OAAO3F,KAAP,KAAiB,UAArB,EAAiC;YAC7B;YACAuH,KAAK,CAAC5B,GAAD,CAAL4B,GAAaC,iBAAiB,CAACxH,KAAD,EAAQuH,KAAR,CAA9BA;UACH;QACJ,CANDrH,CAAAA;MAOH,CARU,CAAX+G;IASH;IACD,OAAOM,KAAP;EACH,CAdM,CAAA,CAcJ,CAdI,CAAP;AAeH,CAAA,CAAA;;AAGD,SAASC,iBAAT,CAA2BlE,EAA3B,EAAyCmE,OAAzC,EAAA;EACI,OAAO,YAAA;sCAAIC,IAAAA,GAAAA,IAAAA,KAAAA,CAAAA,IAAAA,CAAAA,EAAAA,IAAAA,GAAAA,CAAAA,EAAAA,IAAAA,GAAAA,IAAAA,EAAAA,IAAAA,EAAAA,EAAAA;MAAAA,IAAAA,CAAAA,IAAAA,CAAAA,GAAAA,SAAAA,CAAAA,IAAAA,CAAAA;;IACP,OAAOC,WAAW,CAAC,YAAA;MAAA,OAAMrE,EAAE,CAACsE,KAAHtE,CAASmE,OAATnE,EAAkBoE,IAAlBpE,CAAN;IAAA,CAAD,CAAlB;EACH,CAFD;AAGH","sourcesContent":["import { spy } from \"mobx\"\nimport { useState } from \"react\"\n\nif (!useState) {\n    throw new Error(\"mobx-react-lite requires React with Hooks support\")\n}\nif (!spy) {\n    throw new Error(\"mobx-react-lite requires mobx at least version 4 to be available\")\n}\n","let globalIsUsingStaticRendering = false\n\nexport function useStaticRendering(enable: boolean) {\n    globalIsUsingStaticRendering = enable\n}\n\nexport function isUsingStaticRendering(): boolean {\n    return globalIsUsingStaticRendering\n}\n","import { useCallback, useEffect, useState } from \"react\"\n\nconst EMPTY_ARRAY: any[] = []\n\nexport function useUnmount(fn: () => void) {\n    useEffect(() => fn, EMPTY_ARRAY)\n}\n\nexport function useForceUpdate() {\n    const [, setTick] = useState(0)\n\n    const update = useCallback(() => {\n        setTick(tick => tick + 1)\n    }, [])\n\n    return update\n}\n\nexport function isPlainObject(value: any): value is object {\n    if (!value || typeof value !== \"object\") {\n        return false\n    }\n    const proto = Object.getPrototypeOf(value)\n    return !proto || proto === Object.prototype\n}\n\nexport function getSymbol(name: string): symbol | string {\n    if (typeof Symbol === \"function\") {\n        return Symbol.for(name)\n    }\n    return `__$mobx-react ${name}__`\n}\n\ndeclare const window: any\ndeclare const self: any\n\nconst mockGlobal = {}\n\nexport function getGlobal() {\n    if (typeof window !== \"undefined\") {\n        return window\n    }\n    if (typeof global !== \"undefined\") {\n        return global\n    }\n    if (typeof self !== \"undefined\") {\n        return self\n    }\n    return mockGlobal\n}\n","import { configure } from \"mobx\"\n\nimport { getGlobal, getSymbol } from \"./utils\"\n\ninterface IBatchedUpdates {\n    batchedUpdates<A, B>(callback: (a: A, b: B) => any, a: A, b: B): void\n    batchedUpdates<A>(callback: (a: A) => any, a: A): void\n    batchedUpdates(callback: () => any): void\n}\n\nconst observerBatchingConfiguredSymbol = getSymbol(\"observerBatching\")\n\nexport const observerBatching = (reactionScheduler?: IBatchedUpdates) => {\n    if (typeof reactionScheduler === \"function\") {\n        configure({ reactionScheduler })\n    }\n    getGlobal()[observerBatchingConfiguredSymbol] = true\n}\n\nexport const observerBatchingOptOut = () => {\n    configure({ reactionScheduler: undefined })\n    getGlobal()[observerBatchingConfiguredSymbol] = true\n}\n\nexport const isObserverBatched = () => getGlobal()[observerBatchingConfiguredSymbol]\n","import { getDependencyTree, Reaction } from \"mobx\"\n\nexport function printDebugValue(v: Reaction) {\n    return getDependencyTree(v)\n}\n","import { Reaction } from \"mobx\"\n\nexport interface IReactionTracking {\n    /** The Reaction created during first render, which may be leaked */\n    reaction: Reaction\n    /**\n     * The time (in ticks) at which point we should dispose of the reaction\n     * if this component hasn't yet been fully mounted.\n     */\n    cleanAt: number\n\n    /**\n     * Whether the component has yet completed mounting (for us, whether\n     * its useEffect has run)\n     */\n    mounted?: boolean\n\n    /**\n     * Whether the observables that the component is tracking changed between\n     * the first render and the first useEffect.\n     */\n    changedBeforeMount?: boolean\n}\n\nexport function createTrackingData(reaction: Reaction) {\n    const trackingData: IReactionTracking = {\n        cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS,\n        reaction\n    }\n    return trackingData\n}\n\n/**\n * The minimum time before we'll clean up a Reaction created in a render\n * for a component that hasn't managed to run its effects. This needs to\n * be big enough to ensure that a component won't turn up and have its\n * effects run without being re-rendered.\n */\nexport const CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 10_000\n\n/**\n * The frequency with which we'll check for leaked reactions.\n */\nexport const CLEANUP_TIMER_LOOP_MILLIS = 10_000\n\n/**\n * Reactions created by components that have yet to be fully mounted.\n */\nconst uncommittedReactionRefs: Set<React.MutableRefObject<IReactionTracking | null>> = new Set()\n\n/**\n * Latest 'uncommitted reactions' cleanup timer handle.\n */\nlet reactionCleanupHandle: ReturnType<typeof setTimeout> | undefined\n\nfunction ensureCleanupTimerRunning() {\n    if (reactionCleanupHandle === undefined) {\n        reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS)\n    }\n}\n\nexport function scheduleCleanupOfReactionIfLeaked(\n    ref: React.MutableRefObject<IReactionTracking | null>\n) {\n    uncommittedReactionRefs.add(ref)\n\n    ensureCleanupTimerRunning()\n}\n\nexport function recordReactionAsCommitted(\n    reactionRef: React.MutableRefObject<IReactionTracking | null>\n) {\n    uncommittedReactionRefs.delete(reactionRef)\n}\n\n/**\n * Run by the cleanup timer to dispose any outstanding reactions\n */\nfunction cleanUncommittedReactions() {\n    reactionCleanupHandle = undefined\n\n    // Loop through all the candidate leaked reactions; those older\n    // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.\n\n    const now = Date.now()\n    uncommittedReactionRefs.forEach(ref => {\n        const tracking = ref.current\n        if (tracking) {\n            if (now >= tracking.cleanAt) {\n                // It's time to tidy up this leaked reaction.\n                tracking.reaction.dispose()\n                ref.current = null\n                uncommittedReactionRefs.delete(ref)\n            }\n        }\n    })\n\n    if (uncommittedReactionRefs.size > 0) {\n        // We've just finished a round of cleanups but there are still\n        // some leak candidates outstanding.\n        ensureCleanupTimerRunning()\n    }\n}\n\n/* istanbul ignore next */\n/**\n * Only to be used by test functions; do not export outside of mobx-react-lite\n */\nexport function forceCleanupTimerToRunNowForTests() {\n    // This allows us to control the execution of the cleanup timer\n    // to force it to run at awkward times in unit tests.\n    if (reactionCleanupHandle) {\n        clearTimeout(reactionCleanupHandle)\n        cleanUncommittedReactions()\n    }\n}\n\n/* istanbul ignore next */\nexport function resetCleanupScheduleForTests() {\n    if (reactionCleanupHandle) {\n        clearTimeout(reactionCleanupHandle)\n        reactionCleanupHandle = undefined\n    }\n    uncommittedReactionRefs.clear()\n}\n","import { Reaction } from \"mobx\"\nimport React from \"react\"\n\nimport { isObserverBatched } from \"./observerBatching\"\nimport { printDebugValue } from \"./printDebugValue\"\nimport {\n    createTrackingData,\n    IReactionTracking,\n    recordReactionAsCommitted,\n    scheduleCleanupOfReactionIfLeaked\n} from \"./reactionCleanupTracking\"\nimport { isUsingStaticRendering } from \"./staticRendering\"\nimport { useForceUpdate } from \"./utils\"\n\nexport type ForceUpdateHook = () => () => void\n\nexport interface IUseObserverOptions {\n    useForceUpdate?: ForceUpdateHook\n}\n\nconst EMPTY_OBJECT = {}\n\nfunction observerComponentNameFor(baseComponentName: string) {\n    return `observer${baseComponentName}`\n}\n\nlet warnedAboutBatching = false\n\nexport function useObserver<T>(\n    fn: () => T,\n    baseComponentName: string = \"observed\",\n    options: IUseObserverOptions = EMPTY_OBJECT\n): T {\n    if (isUsingStaticRendering()) {\n        return fn()\n    }\n\n    if (__DEV__ && !warnedAboutBatching && !isObserverBatched()) {\n        console.warn(\n            `[MobX] You haven't configured observer batching which might result in unexpected behavior in some cases. See more at https://github.com/mobxjs/mobx-react-lite/#observer-batching`\n        )\n        warnedAboutBatching = true\n    }\n\n    const wantedForceUpdateHook = options.useForceUpdate || useForceUpdate\n    const forceUpdate = wantedForceUpdateHook()\n\n    // StrictMode/ConcurrentMode/Suspense may mean that our component is\n    // rendered and abandoned multiple times, so we need to track leaked\n    // Reactions.\n    const reactionTrackingRef = React.useRef<IReactionTracking | null>(null)\n\n    if (!reactionTrackingRef.current) {\n        // First render for this component (or first time since a previous\n        // reaction from an abandoned render was disposed).\n\n        const newReaction = new Reaction(observerComponentNameFor(baseComponentName), () => {\n            // Observable has changed, meaning we want to re-render\n            // BUT if we're a component that hasn't yet got to the useEffect()\n            // stage, we might be a component that _started_ to render, but\n            // got dropped, and we don't want to make state changes then.\n            // (It triggers warnings in StrictMode, for a start.)\n            if (trackingData.mounted) {\n                // We have reached useEffect(), so we're mounted, and can trigger an update\n                forceUpdate()\n            } else {\n                // We haven't yet reached useEffect(), so we'll need to trigger a re-render\n                // when (and if) useEffect() arrives.  The easiest way to do that is just to\n                // drop our current reaction and allow useEffect() to recreate it.\n                newReaction.dispose()\n                reactionTrackingRef.current = null\n            }\n        })\n\n        const trackingData = createTrackingData(newReaction)\n        reactionTrackingRef.current = trackingData\n        scheduleCleanupOfReactionIfLeaked(reactionTrackingRef)\n    }\n\n    const { reaction } = reactionTrackingRef.current!\n    React.useDebugValue(reaction, printDebugValue)\n\n    React.useEffect(() => {\n        // Called on first mount only\n        recordReactionAsCommitted(reactionTrackingRef)\n\n        if (reactionTrackingRef.current) {\n            // Great. We've already got our reaction from our render;\n            // all we need to do is to record that it's now mounted,\n            // to allow future observable changes to trigger re-renders\n            reactionTrackingRef.current.mounted = true\n        } else {\n            // The reaction we set up in our render has been disposed.\n            // This is either due to bad timings of renderings, e.g. our\n            // component was paused for a _very_ long time, and our\n            // reaction got cleaned up, or we got a observable change\n            // between render and useEffect\n\n            // Re-create the reaction\n            reactionTrackingRef.current = {\n                reaction: new Reaction(observerComponentNameFor(baseComponentName), () => {\n                    // We've definitely already been mounted at this point\n                    forceUpdate()\n                }),\n                cleanAt: Infinity\n            }\n            forceUpdate()\n        }\n\n        return () => {\n            reactionTrackingRef.current!.reaction.dispose()\n            reactionTrackingRef.current = null\n        }\n    }, [])\n\n    // render the original component, but have the\n    // reaction track the observables, so that rendering\n    // can be invalidated (see above) once a dependency changes\n    let rendering!: T\n    let exception\n    reaction.track(() => {\n        try {\n            rendering = fn()\n        } catch (e) {\n            exception = e\n        }\n    })\n    if (exception) {\n        throw exception // re-throw any exceptions catched during rendering\n    }\n    return rendering\n}\n","import { forwardRef, memo } from \"react\"\n\nimport { isUsingStaticRendering } from \"./staticRendering\"\nimport { useObserver } from \"./useObserver\"\n\nexport interface IObserverOptions {\n    readonly forwardRef?: boolean\n}\n\nexport function observer<P extends object, TRef = {}>(\n    baseComponent: React.RefForwardingComponent<TRef, P>,\n    options: IObserverOptions & { forwardRef: true }\n): React.MemoExoticComponent<\n    React.ForwardRefExoticComponent<React.PropsWithoutRef<P> & React.RefAttributes<TRef>>\n>\n\nexport function observer<P extends object>(\n    baseComponent: React.FunctionComponent<P>,\n    options?: IObserverOptions\n): React.FunctionComponent<P>\n\nexport function observer<\n    C extends React.FunctionComponent<any> | React.RefForwardingComponent<any>,\n    Options extends IObserverOptions\n>(\n    baseComponent: C,\n    options?: Options\n): Options extends { forwardRef: true }\n    ? C extends React.RefForwardingComponent<infer TRef, infer P>\n        ? C &\n              React.MemoExoticComponent<\n                  React.ForwardRefExoticComponent<\n                      React.PropsWithoutRef<P> & React.RefAttributes<TRef>\n                  >\n              >\n        : never /* forwardRef set for a non forwarding component */\n    : C & { displayName: string }\n\n// n.b. base case is not used for actual typings or exported in the typing files\nexport function observer<P extends object, TRef = {}>(\n    baseComponent: React.RefForwardingComponent<TRef, P>,\n    options?: IObserverOptions\n) {\n    // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n    if (isUsingStaticRendering()) {\n        return baseComponent\n    }\n\n    const realOptions = {\n        forwardRef: false,\n        ...options\n    }\n\n    const baseComponentName = baseComponent.displayName || baseComponent.name\n\n    const wrappedComponent = (props: P, ref: React.Ref<TRef>) => {\n        return useObserver(() => baseComponent(props, ref), baseComponentName)\n    }\n    wrappedComponent.displayName = baseComponentName\n\n    // memo; we are not interested in deep updates\n    // in props; we assume that if deep objects are changed,\n    // this is in observables, which would have been tracked anyway\n    let memoComponent\n    if (realOptions.forwardRef) {\n        // we have to use forwardRef here because:\n        // 1. it cannot go before memo, only after it\n        // 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it\n        //    since it wouldn't be a callable function anymore\n        memoComponent = memo(forwardRef(wrappedComponent))\n    } else {\n        memoComponent = memo(wrappedComponent)\n    }\n\n    copyStaticProperties(baseComponent, memoComponent)\n    memoComponent.displayName = baseComponentName\n\n    return memoComponent\n}\n\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\nconst hoistBlackList: any = {\n    $$typeof: true,\n    render: true,\n    compare: true,\n    type: true\n}\n\nfunction copyStaticProperties(base: any, target: any) {\n    Object.keys(base).forEach(key => {\n        if (!hoistBlackList[key]) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key)!)\n        }\n    })\n}\n","import { useObserver } from \"./useObserver\"\n\ninterface IObserverProps {\n    children?(): React.ReactElement<any>\n    render?(): React.ReactElement<any>\n}\n\nfunction ObserverComponent({ children, render }: IObserverProps) {\n    const component = children || render\n    if (typeof component !== \"function\") {\n        return null\n    }\n    return useObserver(component)\n}\nObserverComponent.propTypes = {\n    children: ObserverPropsCheck,\n    render: ObserverPropsCheck\n}\nObserverComponent.displayName = \"Observer\"\n\nexport { ObserverComponent as Observer }\n\nfunction ObserverPropsCheck(\n    props: { [k: string]: any },\n    key: string,\n    componentName: string,\n    location: any,\n    propFullName: string\n) {\n    const extraKey = key === \"children\" ? \"render\" : \"children\"\n    const hasProp = typeof props[key] === \"function\"\n    const hasExtraProp = typeof props[extraKey] === \"function\"\n    if (hasProp && hasExtraProp) {\n        return new Error(\n            \"MobX Observer: Do not use children and render in the same time in`\" + componentName\n        )\n    }\n\n    if (hasProp || hasExtraProp) {\n        return null\n    }\n    return new Error(\n        \"Invalid prop `\" +\n            propFullName +\n            \"` of type `\" +\n            typeof props[key] +\n            \"` supplied to\" +\n            \" `\" +\n            componentName +\n            \"`, expected `function`.\"\n    )\n}\n","import { observable, runInAction } from \"mobx\"\nimport React from \"react\"\n\nimport { isPlainObject } from \"./utils\"\n\nexport function useAsObservableSourceInternal<TSource>(\n    current: TSource,\n    usedByLocalStore: boolean\n): TSource {\n    const culprit = usedByLocalStore ? \"useLocalStore\" : \"useAsObservableSource\"\n    if (__DEV__ && usedByLocalStore) {\n        const [initialSource] = React.useState(current)\n        if (\n            (initialSource !== undefined && current === undefined) ||\n            (initialSource === undefined && current !== undefined)\n        ) {\n            throw new Error(`make sure you never pass \\`undefined\\` to ${culprit}`)\n        }\n    }\n    if (usedByLocalStore && current === undefined) {\n        return undefined as any\n    }\n    if (__DEV__ && !isPlainObject(current)) {\n        throw new Error(\n            `${culprit} expects a plain object as ${usedByLocalStore ? \"second\" : \"first\"} argument`\n        )\n    }\n\n    const [res] = React.useState(() => observable(current, {}, { deep: false }))\n    if (__DEV__ && Object.keys(res).length !== Object.keys(current).length) {\n        throw new Error(`the shape of objects passed to ${culprit} should be stable`)\n    }\n    runInAction(() => {\n        Object.assign(res, current)\n    })\n    return res\n}\n\nexport function useAsObservableSource<TSource>(current: TSource): TSource {\n    return useAsObservableSourceInternal(current, false)\n}\n","import { observable, runInAction, transaction } from \"mobx\"\nimport React from \"react\"\n\nimport { useAsObservableSourceInternal } from \"./useAsObservableSource\"\nimport { isPlainObject } from \"./utils\"\n\nexport function useLocalStore<TStore extends Record<string, any>>(initializer: () => TStore): TStore\nexport function useLocalStore<TStore extends Record<string, any>, TSource extends object>(\n    initializer: (source: TSource) => TStore,\n    current: TSource\n): TStore\nexport function useLocalStore<TStore extends Record<string, any>, TSource extends object>(\n    initializer: (source?: TSource) => TStore,\n    current?: TSource\n): TStore {\n    const source = useAsObservableSourceInternal(current, true)\n\n    return React.useState(() => {\n        const local = observable(initializer(source))\n        if (isPlainObject(local)) {\n            runInAction(() => {\n                Object.keys(local).forEach(key => {\n                    const value = local[key]\n                    if (typeof value === \"function\") {\n                        // @ts-ignore No idea why ts2536 is popping out here\n                        local[key] = wrapInTransaction(value, local)\n                    }\n                })\n            })\n        }\n        return local\n    })[0]\n}\n\n// tslint:disable-next-line: ban-types\nfunction wrapInTransaction(fn: Function, context: object) {\n    return (...args: unknown[]) => {\n        return transaction(() => fn.apply(context, args))\n    }\n}\n"]},"metadata":{},"sourceType":"module"}