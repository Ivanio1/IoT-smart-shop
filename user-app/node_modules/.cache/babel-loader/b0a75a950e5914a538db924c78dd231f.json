{"ast":null,"code":"import { Html5QrcodeScanType, Html5QrcodeConstants } from \"../../core\";\n\nvar ScanTypeSelector = function () {\n  function ScanTypeSelector(supportedScanTypes) {\n    this.supportedScanTypes = this.validateAndReturnScanTypes(supportedScanTypes);\n  }\n\n  ScanTypeSelector.prototype.getDefaultScanType = function () {\n    return this.supportedScanTypes[0];\n  };\n\n  ScanTypeSelector.prototype.hasMoreThanOneScanType = function () {\n    return this.supportedScanTypes.length > 1;\n  };\n\n  ScanTypeSelector.prototype.isCameraScanRequired = function () {\n    for (var _i = 0, _a = this.supportedScanTypes; _i < _a.length; _i++) {\n      var scanType = _a[_i];\n\n      if (ScanTypeSelector.isCameraScanType(scanType)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  ScanTypeSelector.isCameraScanType = function (scanType) {\n    return scanType === Html5QrcodeScanType.SCAN_TYPE_CAMERA;\n  };\n\n  ScanTypeSelector.isFileScanType = function (scanType) {\n    return scanType === Html5QrcodeScanType.SCAN_TYPE_FILE;\n  };\n\n  ScanTypeSelector.prototype.validateAndReturnScanTypes = function (supportedScanTypes) {\n    if (!supportedScanTypes || supportedScanTypes.length === 0) {\n      return Html5QrcodeConstants.DEFAULT_SUPPORTED_SCAN_TYPE;\n    }\n\n    var maxExpectedValues = Html5QrcodeConstants.DEFAULT_SUPPORTED_SCAN_TYPE.length;\n\n    if (supportedScanTypes.length > maxExpectedValues) {\n      throw \"Max \".concat(maxExpectedValues, \" values expected for \") + \"supportedScanTypes\";\n    }\n\n    for (var _i = 0, supportedScanTypes_1 = supportedScanTypes; _i < supportedScanTypes_1.length; _i++) {\n      var scanType = supportedScanTypes_1[_i];\n\n      if (!Html5QrcodeConstants.DEFAULT_SUPPORTED_SCAN_TYPE.includes(scanType)) {\n        throw \"Unsupported scan type \".concat(scanType);\n      }\n    }\n\n    return supportedScanTypes;\n  };\n\n  return ScanTypeSelector;\n}();\n\nexport { ScanTypeSelector };","map":{"version":3,"sources":["../../../../src/ui/scanner/scan-type-selector.ts"],"names":[],"mappings":"AAUA,SACI,mBADJ,EAEI,oBAFJ,QAGO,YAHP;;AAMA,IAAA,gBAAA,GAAA,YAAA;AAGI,WAAA,gBAAA,CAAY,kBAAZ,EAAgE;AAC5D,SAAK,kBAAL,GAA0B,KAAK,0BAAL,CACtB,kBADsB,CAA1B;AAEH;;AAMM,EAAA,gBAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,YAAA;AACI,WAAO,KAAK,kBAAL,CAAwB,CAAxB,CAAP;AACH,GAFM;;AAQA,EAAA,gBAAA,CAAA,SAAA,CAAA,sBAAA,GAAP,YAAA;AACI,WAAO,KAAK,kBAAL,CAAwB,MAAxB,GAAiC,CAAxC;AACH,GAFM;;AAKA,EAAA,gBAAA,CAAA,SAAA,CAAA,oBAAA,GAAP,YAAA;AACI,SAAuB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,kBAA5B,EAAuB,EAAA,GAAA,EAAA,CAAA,MAAvB,EAAuB,EAAA,EAAvB,EAAgD;AAA3C,UAAM,QAAQ,GAAA,EAAA,CAAA,EAAA,CAAd;;AACD,UAAI,gBAAgB,CAAC,gBAAjB,CAAkC,QAAlC,CAAJ,EAAiD;AAC7C,eAAO,IAAP;AACH;AACJ;;AACD,WAAO,KAAP;AACH,GAPM;;AAUO,EAAA,gBAAA,CAAA,gBAAA,GAAd,UAA+B,QAA/B,EAA4D;AACxD,WAAO,QAAQ,KAAK,mBAAmB,CAAC,gBAAxC;AACH,GAFa;;AAKA,EAAA,gBAAA,CAAA,cAAA,GAAd,UAA6B,QAA7B,EAA0D;AACtD,WAAO,QAAQ,KAAK,mBAAmB,CAAC,cAAxC;AACH,GAFa;;AAUN,EAAA,gBAAA,CAAA,SAAA,CAAA,0BAAA,GAAR,UACI,kBADJ,EACkD;AAG9C,QAAI,CAAC,kBAAD,IAAuB,kBAAkB,CAAC,MAAnB,KAA8B,CAAzD,EAA4D;AACxD,aAAO,oBAAoB,CAAC,2BAA5B;AACH;;AAGD,QAAI,iBAAiB,GACf,oBAAoB,CAAC,2BAArB,CAAiD,MADvD;;AAEA,QAAI,kBAAkB,CAAC,MAAnB,GAA4B,iBAAhC,EAAmD;AAC/C,YAAM,OAAA,MAAA,CAAO,iBAAP,EAAwB,uBAAxB,IACA,oBADN;AAEH;;AAGD,SAAuB,IAAA,EAAA,GAAA,CAAA,EAAA,oBAAA,GAAA,kBAAvB,EAAuB,EAAA,GAAA,oBAAA,CAAA,MAAvB,EAAuB,EAAA,EAAvB,EAA2C;AAAtC,UAAM,QAAQ,GAAA,oBAAA,CAAA,EAAA,CAAd;;AACD,UAAI,CAAC,oBAAoB,CAAC,2BAArB,CACI,QADJ,CACa,QADb,CAAL,EAC6B;AACzB,cAAM,yBAAA,MAAA,CAAyB,QAAzB,CAAN;AACH;AACJ;;AAED,WAAO,kBAAP;AACH,GAzBO;;AA2BZ,SAAA,gBAAA;AAAC,CA7ED,EAAA","sourceRoot":"","sourcesContent":["import { Html5QrcodeScanType, Html5QrcodeConstants } from \"../../core\";\nvar ScanTypeSelector = (function () {\n    function ScanTypeSelector(supportedScanTypes) {\n        this.supportedScanTypes = this.validateAndReturnScanTypes(supportedScanTypes);\n    }\n    ScanTypeSelector.prototype.getDefaultScanType = function () {\n        return this.supportedScanTypes[0];\n    };\n    ScanTypeSelector.prototype.hasMoreThanOneScanType = function () {\n        return this.supportedScanTypes.length > 1;\n    };\n    ScanTypeSelector.prototype.isCameraScanRequired = function () {\n        for (var _i = 0, _a = this.supportedScanTypes; _i < _a.length; _i++) {\n            var scanType = _a[_i];\n            if (ScanTypeSelector.isCameraScanType(scanType)) {\n                return true;\n            }\n        }\n        return false;\n    };\n    ScanTypeSelector.isCameraScanType = function (scanType) {\n        return scanType === Html5QrcodeScanType.SCAN_TYPE_CAMERA;\n    };\n    ScanTypeSelector.isFileScanType = function (scanType) {\n        return scanType === Html5QrcodeScanType.SCAN_TYPE_FILE;\n    };\n    ScanTypeSelector.prototype.validateAndReturnScanTypes = function (supportedScanTypes) {\n        if (!supportedScanTypes || supportedScanTypes.length === 0) {\n            return Html5QrcodeConstants.DEFAULT_SUPPORTED_SCAN_TYPE;\n        }\n        var maxExpectedValues = Html5QrcodeConstants.DEFAULT_SUPPORTED_SCAN_TYPE.length;\n        if (supportedScanTypes.length > maxExpectedValues) {\n            throw \"Max \".concat(maxExpectedValues, \" values expected for \")\n                + \"supportedScanTypes\";\n        }\n        for (var _i = 0, supportedScanTypes_1 = supportedScanTypes; _i < supportedScanTypes_1.length; _i++) {\n            var scanType = supportedScanTypes_1[_i];\n            if (!Html5QrcodeConstants.DEFAULT_SUPPORTED_SCAN_TYPE\n                .includes(scanType)) {\n                throw \"Unsupported scan type \".concat(scanType);\n            }\n        }\n        return supportedScanTypes;\n    };\n    return ScanTypeSelector;\n}());\nexport { ScanTypeSelector };\n//# sourceMappingURL=scan-type-selector.js.map"]},"metadata":{},"sourceType":"module"}