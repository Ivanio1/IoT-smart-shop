{"ast":null,"code":"import * as ZXing from \"../third_party/zxing-js.umd\";\nimport { QrcodeResultFormat, Html5QrcodeSupportedFormats } from \"./core\";\n\nvar ZXingHtml5QrcodeDecoder = function () {\n  function ZXingHtml5QrcodeDecoder(requestedFormats, verbose, logger) {\n    this.formatMap = new Map([[Html5QrcodeSupportedFormats.QR_CODE, ZXing.BarcodeFormat.QR_CODE], [Html5QrcodeSupportedFormats.AZTEC, ZXing.BarcodeFormat.AZTEC], [Html5QrcodeSupportedFormats.CODABAR, ZXing.BarcodeFormat.CODABAR], [Html5QrcodeSupportedFormats.CODE_39, ZXing.BarcodeFormat.CODE_39], [Html5QrcodeSupportedFormats.CODE_93, ZXing.BarcodeFormat.CODE_93], [Html5QrcodeSupportedFormats.CODE_128, ZXing.BarcodeFormat.CODE_128], [Html5QrcodeSupportedFormats.DATA_MATRIX, ZXing.BarcodeFormat.DATA_MATRIX], [Html5QrcodeSupportedFormats.MAXICODE, ZXing.BarcodeFormat.MAXICODE], [Html5QrcodeSupportedFormats.ITF, ZXing.BarcodeFormat.ITF], [Html5QrcodeSupportedFormats.EAN_13, ZXing.BarcodeFormat.EAN_13], [Html5QrcodeSupportedFormats.EAN_8, ZXing.BarcodeFormat.EAN_8], [Html5QrcodeSupportedFormats.PDF_417, ZXing.BarcodeFormat.PDF_417], [Html5QrcodeSupportedFormats.RSS_14, ZXing.BarcodeFormat.RSS_14], [Html5QrcodeSupportedFormats.RSS_EXPANDED, ZXing.BarcodeFormat.RSS_EXPANDED], [Html5QrcodeSupportedFormats.UPC_A, ZXing.BarcodeFormat.UPC_A], [Html5QrcodeSupportedFormats.UPC_E, ZXing.BarcodeFormat.UPC_E], [Html5QrcodeSupportedFormats.UPC_EAN_EXTENSION, ZXing.BarcodeFormat.UPC_EAN_EXTENSION]]);\n    this.reverseFormatMap = this.createReverseFormatMap();\n\n    if (!ZXing) {\n      throw \"Use html5qrcode.min.js without edit, ZXing not found.\";\n    }\n\n    this.verbose = verbose;\n    this.logger = logger;\n    var formats = this.createZXingFormats(requestedFormats);\n    var hints = new Map();\n    hints.set(ZXing.DecodeHintType.POSSIBLE_FORMATS, formats);\n    hints.set(ZXing.DecodeHintType.TRY_HARDER, false);\n    this.hints = hints;\n  }\n\n  ZXingHtml5QrcodeDecoder.prototype.decodeAsync = function (canvas) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      try {\n        resolve(_this.decode(canvas));\n      } catch (error) {\n        reject(error);\n      }\n    });\n  };\n\n  ZXingHtml5QrcodeDecoder.prototype.decode = function (canvas) {\n    var zxingDecoder = new ZXing.MultiFormatReader(this.verbose, this.hints);\n    var luminanceSource = new ZXing.HTMLCanvasElementLuminanceSource(canvas);\n    var binaryBitmap = new ZXing.BinaryBitmap(new ZXing.HybridBinarizer(luminanceSource));\n    var result = zxingDecoder.decode(binaryBitmap);\n    return {\n      text: result.text,\n      format: QrcodeResultFormat.create(this.toHtml5QrcodeSupportedFormats(result.format)),\n      debugData: this.createDebugData()\n    };\n  };\n\n  ZXingHtml5QrcodeDecoder.prototype.createReverseFormatMap = function () {\n    var result = new Map();\n    this.formatMap.forEach(function (value, key, _) {\n      result.set(value, key);\n    });\n    return result;\n  };\n\n  ZXingHtml5QrcodeDecoder.prototype.toHtml5QrcodeSupportedFormats = function (zxingFormat) {\n    if (!this.reverseFormatMap.has(zxingFormat)) {\n      throw \"reverseFormatMap doesn't have \".concat(zxingFormat);\n    }\n\n    return this.reverseFormatMap.get(zxingFormat);\n  };\n\n  ZXingHtml5QrcodeDecoder.prototype.createZXingFormats = function (requestedFormats) {\n    var zxingFormats = [];\n\n    for (var _i = 0, requestedFormats_1 = requestedFormats; _i < requestedFormats_1.length; _i++) {\n      var requestedFormat = requestedFormats_1[_i];\n\n      if (this.formatMap.has(requestedFormat)) {\n        zxingFormats.push(this.formatMap.get(requestedFormat));\n      } else {\n        this.logger.logError(\"\".concat(requestedFormat, \" is not supported by\") + \"ZXingHtml5QrcodeShim\");\n      }\n    }\n\n    return zxingFormats;\n  };\n\n  ZXingHtml5QrcodeDecoder.prototype.createDebugData = function () {\n    return {\n      decoderName: \"zxing-js\"\n    };\n  };\n\n  return ZXingHtml5QrcodeDecoder;\n}();\n\nexport { ZXingHtml5QrcodeDecoder };","map":{"version":3,"sources":["../../src/zxing-html5-qrcode-decoder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as ZXing from \"../third_party/zxing-js.umd\";\nimport { QrcodeResultFormat, Html5QrcodeSupportedFormats } from \"./core\";\nvar ZXingHtml5QrcodeDecoder = (function () {\n    function ZXingHtml5QrcodeDecoder(requestedFormats, verbose, logger) {\n        this.formatMap = new Map([\n            [Html5QrcodeSupportedFormats.QR_CODE, ZXing.BarcodeFormat.QR_CODE],\n            [Html5QrcodeSupportedFormats.AZTEC, ZXing.BarcodeFormat.AZTEC],\n            [Html5QrcodeSupportedFormats.CODABAR, ZXing.BarcodeFormat.CODABAR],\n            [Html5QrcodeSupportedFormats.CODE_39, ZXing.BarcodeFormat.CODE_39],\n            [Html5QrcodeSupportedFormats.CODE_93, ZXing.BarcodeFormat.CODE_93],\n            [\n                Html5QrcodeSupportedFormats.CODE_128,\n                ZXing.BarcodeFormat.CODE_128\n            ],\n            [\n                Html5QrcodeSupportedFormats.DATA_MATRIX,\n                ZXing.BarcodeFormat.DATA_MATRIX\n            ],\n            [\n                Html5QrcodeSupportedFormats.MAXICODE,\n                ZXing.BarcodeFormat.MAXICODE\n            ],\n            [Html5QrcodeSupportedFormats.ITF, ZXing.BarcodeFormat.ITF],\n            [Html5QrcodeSupportedFormats.EAN_13, ZXing.BarcodeFormat.EAN_13],\n            [Html5QrcodeSupportedFormats.EAN_8, ZXing.BarcodeFormat.EAN_8],\n            [Html5QrcodeSupportedFormats.PDF_417, ZXing.BarcodeFormat.PDF_417],\n            [Html5QrcodeSupportedFormats.RSS_14, ZXing.BarcodeFormat.RSS_14],\n            [\n                Html5QrcodeSupportedFormats.RSS_EXPANDED,\n                ZXing.BarcodeFormat.RSS_EXPANDED\n            ],\n            [Html5QrcodeSupportedFormats.UPC_A, ZXing.BarcodeFormat.UPC_A],\n            [Html5QrcodeSupportedFormats.UPC_E, ZXing.BarcodeFormat.UPC_E],\n            [\n                Html5QrcodeSupportedFormats.UPC_EAN_EXTENSION,\n                ZXing.BarcodeFormat.UPC_EAN_EXTENSION\n            ]\n        ]);\n        this.reverseFormatMap = this.createReverseFormatMap();\n        if (!ZXing) {\n            throw \"Use html5qrcode.min.js without edit, ZXing not found.\";\n        }\n        this.verbose = verbose;\n        this.logger = logger;\n        var formats = this.createZXingFormats(requestedFormats);\n        var hints = new Map();\n        hints.set(ZXing.DecodeHintType.POSSIBLE_FORMATS, formats);\n        hints.set(ZXing.DecodeHintType.TRY_HARDER, false);\n        this.hints = hints;\n    }\n    ZXingHtml5QrcodeDecoder.prototype.decodeAsync = function (canvas) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            try {\n                resolve(_this.decode(canvas));\n            }\n            catch (error) {\n                reject(error);\n            }\n        });\n    };\n    ZXingHtml5QrcodeDecoder.prototype.decode = function (canvas) {\n        var zxingDecoder = new ZXing.MultiFormatReader(this.verbose, this.hints);\n        var luminanceSource = new ZXing.HTMLCanvasElementLuminanceSource(canvas);\n        var binaryBitmap = new ZXing.BinaryBitmap(new ZXing.HybridBinarizer(luminanceSource));\n        var result = zxingDecoder.decode(binaryBitmap);\n        return {\n            text: result.text,\n            format: QrcodeResultFormat.create(this.toHtml5QrcodeSupportedFormats(result.format)),\n            debugData: this.createDebugData()\n        };\n    };\n    ZXingHtml5QrcodeDecoder.prototype.createReverseFormatMap = function () {\n        var result = new Map();\n        this.formatMap.forEach(function (value, key, _) {\n            result.set(value, key);\n        });\n        return result;\n    };\n    ZXingHtml5QrcodeDecoder.prototype.toHtml5QrcodeSupportedFormats = function (zxingFormat) {\n        if (!this.reverseFormatMap.has(zxingFormat)) {\n            throw \"reverseFormatMap doesn't have \".concat(zxingFormat);\n        }\n        return this.reverseFormatMap.get(zxingFormat);\n    };\n    ZXingHtml5QrcodeDecoder.prototype.createZXingFormats = function (requestedFormats) {\n        var zxingFormats = [];\n        for (var _i = 0, requestedFormats_1 = requestedFormats; _i < requestedFormats_1.length; _i++) {\n            var requestedFormat = requestedFormats_1[_i];\n            if (this.formatMap.has(requestedFormat)) {\n                zxingFormats.push(this.formatMap.get(requestedFormat));\n            }\n            else {\n                this.logger.logError(\"\".concat(requestedFormat, \" is not supported by\")\n                    + \"ZXingHtml5QrcodeShim\");\n            }\n        }\n        return zxingFormats;\n    };\n    ZXingHtml5QrcodeDecoder.prototype.createDebugData = function () {\n        return { decoderName: \"zxing-js\" };\n    };\n    return ZXingHtml5QrcodeDecoder;\n}());\nexport { ZXingHtml5QrcodeDecoder };\n//# sourceMappingURL=zxing-html5-qrcode-decoder.js.map"]},"metadata":{},"sourceType":"module"}